###########################################
# Program to apply grammer to simple text #
###########################################

------------------------------------------
Input:
------------------------------------------
sample.txt:
    This is sample file Will this program
    work  Great it is working
------------------------------------------

------------------------------------------
Output:
------------------------------------------
result.txt:
    This is sample file. Wil this program
    work? Great! it is working.
------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$               Pseudocode               $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

1. Initialize File pointer
2. Initialize Flag Array
3. Initialize Buffer to hold data
4. Read data from file and hold that into Buffer
5. Initialize two dimensional char array to hold words
   - Extract words from buffer and get into words array
   - Free memory of Buffer
6.While(words[i] != NULL)
    - set flags for 3 elements
        [words[i],words[i+1],words[i+2]] = [-1,-1,-1]
        `Initially they all will be -1
    - check word[i] for case
        If capital then flag[0] will be 0
        If lower then flag[0] will be 1
    -check word[i+1] (middle element)
        - Use first and last word for refernece
            If any successive elements are capitals
                It is name
                    - check data set for possible match
                        - If found skip next step
                        - If not found It is name   
                            - Add : at end of that word
            else
                check dataset with middle elemet
                    - If found match apply logic
                Rotate letters
                    - Middle word -> First word
                    - Last word -> Middle word
                    - First word -> Last word
                set flag of last word -1
            goto step 6
    - move to next 3 elemets and perform loop
7. Write changed words into result file
8. Free memory

*********************************************
*                 Example                   *
*********************************************

words = { "Umesh", "This", "is", "sample", "file",
          "Dhrumil","Is","it","working"}
loop:
    words:flag -> {"Umesh":-1, "This":-1, "is":-1}
    `checking first element
    words:flag -> {"Umesh":0, "This":-1, "is":-1}
                      ^ Capital found
    'checking middle element
    words:flag -> {"Umesh":0, "This":1, "is":-1}
                                ^ keyword found
    `rotate elements
    words:flag -> {"Umesh":0, "is":-1, "This": 1}
                                ^ No change
    `rotate 2 times to get back data
    `Output
    words:flag -> {"Umesh : ":0, "This":-1, "is":-1}
                        ^ : Applied
    
    perform for all data

Output:
    words = { "Umesh : ", "This", "is", "sample", "file.",
          "Dhrumil : ","Is","it","working ?"}